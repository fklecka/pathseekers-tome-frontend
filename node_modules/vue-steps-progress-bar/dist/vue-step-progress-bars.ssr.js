'use strict';var vue=require('vue');function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}var script = {
  name: 'StepProgressBar',
  props: {
    options: {
      type: Object,
      default: function _default() {
        return {
          maxWidth: '100%',
          nodeWidth: 40,
          nodeHeight: 40,
          barHeight: 3,
          showTooltip: true,
          showContent: true,
          barType: 'dashed',
          nodes: [{
            content: 'step 1',
            tooltip: 'sth about step 1'
          }, {
            content: 'step 2',
            tooltip: 'sth about step 2'
          }, {
            content: 'step 3',
            tooltip: 'sth about step 3'
          }, {
            content: 'step 4',
            tooltip: 'sth about step 4'
          }]
        };
      }
    }
  },
  created: function created() {
    setTimeout(this.handleHover, 20);
  },
  methods: {
    next: function next() {
      var _this$options;

      if ((_this$options = this.options) !== null && _this$options !== void 0 && _this$options.beforeNext) {
        this.options.onNext();
      }

      var currNode = document.querySelector('.node.active');

      if (currNode) {
        var _this$options2;

        var currNodeIndex = Number(currNode.getAttribute('id'));
        currNode.classList.remove('active');
        currNode.classList.add('checked');
        currNode.firstElementChild.innerHTML = '';

        if (currNodeIndex !== this.options.nodes.length - 1) {
          var nextNode = document.querySelector(".node.node-".concat(currNodeIndex + 1));
          nextNode.classList.add('active');
          var currBar = document.querySelector(".bar-".concat(currNodeIndex));
          currBar.classList.add('checked');
        } else if ((_this$options2 = this.options) !== null && _this$options2 !== void 0 && _this$options2.onFinish) {
          this.options.onFinish();
        }
      }
    },
    prev: function prev() {
      var currNode = document.querySelector('.node.active') ? document.querySelector('.node.active') : document.querySelector('.last-node');

      if (currNode) {
        var currNodeIndex = Number(currNode.getAttribute('id'));

        if (currNodeIndex !== 0) {
          currNode.classList.remove('active');
          currNode.classList.remove('checked');
          currNode.firstElementChild.innerHTML = '';
          currNode.firstElementChild.innerHTML = currNodeIndex + 1;
          var prevNode = document.querySelector(".node.node-".concat(currNodeIndex - 1));
          prevNode.classList.remove('checked');
          prevNode.firstElementChild.innerHTML = '';
          prevNode.firstElementChild.innerHTML = currNodeIndex;
          prevNode.classList.add('active');
          var prevBar = document.querySelector(".bar-".concat(currNodeIndex - 1));
          prevBar.classList.remove('checked');
        }
      }
    },
    restart: function restart() {
      document.querySelectorAll('.node').forEach(function (node, index) {
        node.classList.remove('checked');
        node.classList.remove('active');
        node.firstElementChild.innerHTML = index;

        if (node.classList.contains('start-node')) {
          node.classList.add('active');
        }
      });
      document.querySelectorAll('.progress-bar').forEach(function (bar) {
        bar.classList.remove('checked');
      });
    },
    handleHover: function handleHover() {
      if (this.options.showTooltip) {
        document.querySelectorAll('.node-circle').forEach(function (node) {
          var index = node.getAttribute('id');
          node.addEventListener('mouseover', function () {
            document.querySelectorAll('.node-tooltip').forEach(function (item) {
              item.classList.remove('remove-tooltip'), item.classList.remove('show-tooltip');
            });
            document.querySelector(".node-tooltip.node-tooltip-".concat(index)).classList.add('show-tooltip');
          });
          node.addEventListener('mouseleave', function () {
            document.querySelectorAll('.node-tooltip').forEach(function (item) {
              item.classList.remove('remove-tooltip'), item.classList.remove('show-tooltip');
            });
            document.querySelector(".node-tooltip.node-tooltip-".concat(index)).classList.add('remove-tooltip');
          });
        });
      }
    }
  }
};var _hoisted_1 = ["id"];
var _hoisted_2 = ["id"];
var _hoisted_3 = ["id"];
var _hoisted_4 = {
  key: 0,
  class: "node-content"
};
var _hoisted_5 = {
  key: 1,
  class: "tooltip-container"
};
var _hoisted_6 = {
  class: "tooltip-text",
  style: {
    "position": "relative"
  }
};
var _hoisted_7 = ["id"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return vue.openBlock(), vue.createElementBlock("div", {
    class: "progress-container",
    style: vue.normalizeStyle({
      maxWidth: $props.options.maxWidth
    })
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.options.nodes, function (node, index) {
    return vue.openBlock(), vue.createElementBlock("div", {
      class: "progress",
      id: index,
      key: index
    }, [vue.createElementVNode("div", {
      class: vue.normalizeClass(["node", ["node-".concat(index), {
        'start-node active': index === 0
      }, {
        'last-node': index + 1 === $props.options.nodes.length
      }]]),
      style: vue.normalizeStyle({
        width: $props.options.nodeWidth + 'px',
        height: $props.options.nodeHeight + 'px'
      }),
      id: index
    }, [vue.createElementVNode("div", {
      class: "node-circle",
      id: index
    }, vue.toDisplayString(index + 1), 9, _hoisted_3), $props.options.showContent ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_4, [vue.createElementVNode("p", null, vue.toDisplayString(node.content), 1)])) : vue.createCommentVNode("", true), $props.options.showTooltip ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_5, [vue.createElementVNode("div", {
      class: vue.normalizeClass(["node-tooltip", ["node-tooltip-".concat(index), index % 2 === 0 ? 'node-tooltip-top' : 'node-tooltip-down']])
    }, [vue.createElementVNode("p", _hoisted_6, vue.toDisplayString(node.tooltip), 1)], 2)])) : vue.createCommentVNode("", true)], 14, _hoisted_2), index + 1 !== $props.options.nodes.length ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 0,
      class: vue.normalizeClass(["progress-bar", ["bar-".concat(index)]]),
      id: index
    }, [vue.createElementVNode("div", {
      class: "progress-bar-active",
      style: vue.normalizeStyle({
        borderTop: $props.options.barHeight + "px ".concat($props.options.barType, " #bbbbbb")
      })
    }, null, 4), vue.createElementVNode("div", {
      class: "progress-bar-checked",
      style: vue.normalizeStyle({
        borderTop: $props.options.barHeight + 'px solid #F28241'
      })
    }, null, 4)], 10, _hoisted_7)) : vue.createCommentVNode("", true)], 8, _hoisted_1);
  }), 128))], 4);
}script.render = render;// Import vue component
// IIFE injects install function into component, allowing component
// to be registered via Vue.use() as well as Vue.component(),

var component = /*#__PURE__*/(function () {
  // Get component instance
  var installable = script; // Attach install function executed by Vue.use()

  installable.install = function (app) {
    app.component('VueStepProgressBars', installable);
  };

  return installable;
})(); // It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = directive;
var namedExports=/*#__PURE__*/Object.freeze({__proto__:null,'default': component});// only expose one global var, with named exports exposed as properties of
// that global var (eg. plugin.namedExport)

Object.entries(namedExports).forEach(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      exportName = _ref2[0],
      exported = _ref2[1];

  if (exportName !== 'default') component[exportName] = exported;
});module.exports=component;