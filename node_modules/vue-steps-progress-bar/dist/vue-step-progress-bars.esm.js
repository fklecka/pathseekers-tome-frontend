import { openBlock, createElementBlock, normalizeStyle, Fragment, renderList, createElementVNode, normalizeClass, toDisplayString, createCommentVNode } from 'vue';

var script = {
  name: 'StepProgressBar',
  props: {
    options: {
      type: Object,
      default: function () {
        return {
          maxWidth: '100%',
          nodeWidth: 40,
          nodeHeight: 40,
          barHeight: 3,
          showTooltip: true,
          showContent: true,
          barType: 'dashed',
          nodes: [{
            content: 'step 1',
            tooltip: 'sth about step 1'
          }, {
            content: 'step 2',
            tooltip: 'sth about step 2'
          }, {
            content: 'step 3',
            tooltip: 'sth about step 3'
          }, {
            content: 'step 4',
            tooltip: 'sth about step 4'
          }]
        };
      }
    }
  },

  created() {
    setTimeout(this.handleHover, 20);
  },

  methods: {
    next() {
      var _this$options;

      if ((_this$options = this.options) !== null && _this$options !== void 0 && _this$options.beforeNext) {
        this.options.onNext();
      }

      let currNode = document.querySelector('.node.active');

      if (currNode) {
        var _this$options2;

        let currNodeIndex = Number(currNode.getAttribute('id'));
        currNode.classList.remove('active');
        currNode.classList.add('checked');
        currNode.firstElementChild.innerHTML = '';

        if (currNodeIndex !== this.options.nodes.length - 1) {
          let nextNode = document.querySelector(`.node.node-${currNodeIndex + 1}`);
          nextNode.classList.add('active');
          let currBar = document.querySelector(`.bar-${currNodeIndex}`);
          currBar.classList.add('checked');
        } else if ((_this$options2 = this.options) !== null && _this$options2 !== void 0 && _this$options2.onFinish) {
          this.options.onFinish();
        }
      }
    },

    prev() {
      let currNode = document.querySelector('.node.active') ? document.querySelector('.node.active') : document.querySelector('.last-node');

      if (currNode) {
        let currNodeIndex = Number(currNode.getAttribute('id'));

        if (currNodeIndex !== 0) {
          currNode.classList.remove('active');
          currNode.classList.remove('checked');
          currNode.firstElementChild.innerHTML = '';
          currNode.firstElementChild.innerHTML = currNodeIndex + 1;
          let prevNode = document.querySelector(`.node.node-${currNodeIndex - 1}`);
          prevNode.classList.remove('checked');
          prevNode.firstElementChild.innerHTML = '';
          prevNode.firstElementChild.innerHTML = currNodeIndex;
          prevNode.classList.add('active');
          let prevBar = document.querySelector(`.bar-${currNodeIndex - 1}`);
          prevBar.classList.remove('checked');
        }
      }
    },

    restart() {
      document.querySelectorAll('.node').forEach((node, index) => {
        node.classList.remove('checked');
        node.classList.remove('active');
        node.firstElementChild.innerHTML = index;

        if (node.classList.contains('start-node')) {
          node.classList.add('active');
        }
      });
      document.querySelectorAll('.progress-bar').forEach(bar => {
        bar.classList.remove('checked');
      });
    },

    handleHover() {
      if (this.options.showTooltip) {
        document.querySelectorAll('.node-circle').forEach(node => {
          const index = node.getAttribute('id');
          node.addEventListener('mouseover', function () {
            document.querySelectorAll('.node-tooltip').forEach(item => {
              item.classList.remove('remove-tooltip'), item.classList.remove('show-tooltip');
            });
            document.querySelector(`.node-tooltip.node-tooltip-${index}`).classList.add('show-tooltip');
          });
          node.addEventListener('mouseleave', function () {
            document.querySelectorAll('.node-tooltip').forEach(item => {
              item.classList.remove('remove-tooltip'), item.classList.remove('show-tooltip');
            });
            document.querySelector(`.node-tooltip.node-tooltip-${index}`).classList.add('remove-tooltip');
          });
        });
      }
    }

  }
};

const _hoisted_1 = ["id"];
const _hoisted_2 = ["id"];
const _hoisted_3 = ["id"];
const _hoisted_4 = {
  key: 0,
  class: "node-content"
};
const _hoisted_5 = {
  key: 1,
  class: "tooltip-container"
};
const _hoisted_6 = {
  class: "tooltip-text",
  style: {
    "position": "relative"
  }
};
const _hoisted_7 = ["id"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: "progress-container",
    style: normalizeStyle({
      maxWidth: $props.options.maxWidth
    })
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList($props.options.nodes, (node, index) => {
    return openBlock(), createElementBlock("div", {
      class: "progress",
      id: index,
      key: index
    }, [createElementVNode("div", {
      class: normalizeClass(["node", [`node-${index}`, {
        'start-node active': index === 0
      }, {
        'last-node': index + 1 === $props.options.nodes.length
      }]]),
      style: normalizeStyle({
        width: $props.options.nodeWidth + 'px',
        height: $props.options.nodeHeight + 'px'
      }),
      id: index
    }, [createElementVNode("div", {
      class: "node-circle",
      id: index
    }, toDisplayString(index + 1), 9, _hoisted_3), $props.options.showContent ? (openBlock(), createElementBlock("div", _hoisted_4, [createElementVNode("p", null, toDisplayString(node.content), 1)])) : createCommentVNode("", true), $props.options.showTooltip ? (openBlock(), createElementBlock("div", _hoisted_5, [createElementVNode("div", {
      class: normalizeClass(["node-tooltip", [`node-tooltip-${index}`, index % 2 === 0 ? 'node-tooltip-top' : 'node-tooltip-down']])
    }, [createElementVNode("p", _hoisted_6, toDisplayString(node.tooltip), 1)], 2)])) : createCommentVNode("", true)], 14, _hoisted_2), index + 1 !== $props.options.nodes.length ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(["progress-bar", [`bar-${index}`]]),
      id: index
    }, [createElementVNode("div", {
      class: "progress-bar-active",
      style: normalizeStyle({
        borderTop: $props.options.barHeight + `px ${$props.options.barType} #bbbbbb`
      })
    }, null, 4), createElementVNode("div", {
      class: "progress-bar-checked",
      style: normalizeStyle({
        borderTop: $props.options.barHeight + 'px solid #F28241'
      })
    }, null, 4)], 10, _hoisted_7)) : createCommentVNode("", true)], 8, _hoisted_1);
  }), 128))], 4);
}

script.render = render;

// Import vue component
// IIFE injects install function into component, allowing component
// to be registered via Vue.use() as well as Vue.component(),

var entry_esm = /*#__PURE__*/(() => {
  // Get component instance
  const installable = script; // Attach install function executed by Vue.use()

  installable.install = app => {
    app.component('VueStepProgressBars', installable);
  };

  return installable;
})(); // It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = directive;

export { entry_esm as default };
